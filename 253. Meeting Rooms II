Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

 

Example 1:

Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2
Example 2:

Input: intervals = [[7,10],[2,4]]
Output: 1


//首先根据每个interval的起始时间从小到大排序，然后我们就是判断当前的所有会议里的最小的结束时间是否在我即将要开会的时间段的开始时间之前，如果在，可重复使用该会议室。所以问题就转换成了找一个当前最小会议结束的值，就用minheap

class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals == null || intervals[0].length == 0) {
            return 0;
        }
        Arrays.sort(intervals, (int[]a, int[]b) -> a[0] - b[0]);
        PriorityQueue<Integer> minHeap = new PriorityQueue<>((a, b) -> a - b);
        minHeap.offer(intervals[0][1]);
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] >= minHeap.peek()) {
                minHeap.poll();
            }
            minHeap.offer(intervals[i][1]);
        }
        return minHeap.size();
    }
}
