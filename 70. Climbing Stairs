You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

//思路：
//M[]:how many distinct ways can you climb to the top
//M[i] = M[i - 1] + M[i - 2] //因为题目说每次只能1 step或者2 steps，那么假设i = 3， i- 1就是从第二台阶迈一步上到第三台阶， i - 2 就是从第一台阶迈两步到第三台阶，所以把前两者加起来即可。
//这个原理和fibonacci一样。
//base case: M[1] = 1, M[2] = 2

//Solution:
class Solution {
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int first = 1;
        int second = 2;
        for (int i = 3; i <= n; i++) {
            int third = first + second;
            first = second;
            second = third;
        }
        return second;
    }
}

//TC: O(n)
//SC: O(1)
