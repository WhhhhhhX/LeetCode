Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:

Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].

//思路：一般在图上求最大或者最小问题，就用dfs+recursion。我们可以结合dp去剪枝，降低时间复杂度。

//Solution:
class Solution {
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int row = matrix.length;
        int col = matrix[0].length;

        if (col == 1 && row == 1) {
            return 1;
        }

        int max = 0;
        int[][] M = new int[row][col];

        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (M[i][j] == 0) {
                    max = Math.max(max, dfs(matrix, M, i, j, row, col));
                }
            }
        }
        return max;

    }

    private int dfs(int[][] matrix, int[][] M, int i, int j, int row, int col) {
        //base case
        if (M[i][j] > 0) {
            return M[i][j];
        }

        int[][] direc = new int[][]{{1,0}, {-1, 0}, {0, 1}, {0, -1}};

        int ans = 1;
        for (int[] dir : direc) {
            int newI = i + dir[0];
            int newJ = j + dir[1];

            if (newI >= 0 && newI < row && newJ >= 0 && newJ < col && matrix[newI][newJ] > matrix[i][j]) {
                ans = Math.max(ans, dfs(matrix, M, newI,newJ, row, col) + 1);
            }
            
        }
        M[i][j] = ans;
        return ans;
    }
}

TC: O(mn)
SC: O(mn)
