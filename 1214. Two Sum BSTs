Given the roots of two binary search trees, root1 and root2, return true if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer target.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean twoSumBSTs(TreeNode root1, TreeNode root2, int target) {
        Set<Integer> values = new HashSet<>();
        addValues(root1, values);
        return findTarget(root2, values, target);
    }

    private void addValues(TreeNode root, Set<Integer> values) {
        if (root == null) {
            return;
        }
        addValues(root.left, values);
        values.add(root.val);
        addValues(root.right, values);
    }

    private boolean findTarget(TreeNode root, Set<Integer> values, int target) {
        if (root == null) {
            return false;
        }
        if (values.contains(target - root.val)) {
            return true;
        }
        return findTarget(root.left, values, target) || findTarget(root.right, values, target);
    }
}
