Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

//tc&sc: O(n)
//这个方法很显然，你过一遍例子就能感觉得出来从数据结构末尾拿出，再放入头部，那肯定是deque
class Solution {
    public void rotate(int[] nums, int k) {
        if (nums == null || nums.length == 0 || k == 0) {
            return;
        }
        Deque<Integer> dq = new ArrayDeque<>();
        for (int num : nums) {
            dq.offerLast(num);
        }
        for (int i = 0; i < k; i++) {
            dq.offerFirst(dq.pollLast());
        }
        for (int i = 0; i < nums.length; i++) {
            nums[i] = dq.pollFirst();
        }

    }
}

// TC: O(n) SC: O(1)
//swap swap trick, 先整体swap，再局部swap就是结果
class Solution {
    public void rotate(int[] nums, int k) {
        if (nums == null || nums.length == 0 || k == 0) {
            return;
        }
        k = k % nums.length;
        reverse(nums, 0, nums.length - 1);
        reverse(nums, 0, k - 1);
        reverse(nums, k, nums.length - 1);
    }

    private void reverse(int[] nums, int i, int j) {
        while (i < j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
            i++;
            j--;
        }
    }
}
