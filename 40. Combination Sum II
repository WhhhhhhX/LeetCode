Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        if (candidates == null || candidates.length == 0) {
            return res;
        }
        Arrays.sort(candidates);
        helper(res, cur, target, 0, candidates);
        return res;
    }

    private void helper(List<List<Integer>> res, List<Integer> cur, int remain,  int start, int[] arr) {
        //if (remain < 0) return;
        if (remain == 0) {
            res.add(new ArrayList<>(cur));
            return;
        }

        for (int i = start; i < arr.length; i++) {
            if (i > start && arr[i-1] == arr[i]) {
                continue;
            }
            if (arr[i] > remain) break;
            cur.add(arr[i]);
            helper(res, cur, remain - arr[i], i + 1, arr);
            cur.remove(cur.size() - 1);
        }
    }
}
