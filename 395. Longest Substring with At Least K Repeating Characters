Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

if no such substring exists, return 0.

 

Example 1:

Input: s = "aaabb", k = 3
Output: 3
Explanation: The longest substring is "aaa", as 'a' is repeated 3 times.
Example 2:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.

class Solution {
    public int longestSubstring(String s, int k) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int totalMaxUniqueChar = getUniqueChar(s);
        int[] freqMap = new int[26];
        int res = 0;
        for (int curMaxUniqueChar = 1; curMaxUniqueChar <= totalMaxUniqueChar; curMaxUniqueChar++) {
            Arrays.fill(freqMap, 0);
            int curWhileLoopUniqueChar = 0, countAtLeastK = 0, windowStart = 0, windowEnd = 0;
            while (windowEnd < s.length()) {
                if (curWhileLoopUniqueChar <= curMaxUniqueChar) {
                    int index = s.charAt(windowEnd) - 'a';
                    if (freqMap[index] == 0) {
                        curWhileLoopUniqueChar++;
                    }
                    freqMap[index]++;
                    if (freqMap[index] == k) {
                        countAtLeastK++;
                    }
                    windowEnd++;
                } else {
                    int index = s.charAt(windowStart) - 'a';
                    if (freqMap[index] == k) {
                        countAtLeastK--;
                    }
                    freqMap[index]--;
                    if (freqMap[index] == 0) {
                        curWhileLoopUniqueChar--;
                    }
                    windowStart++;
                }
                if (curWhileLoopUniqueChar == curMaxUniqueChar && curWhileLoopUniqueChar == countAtLeastK) {
                    res = Math.max(res, windowEnd - windowStart);
                }
            }
        }
        return res;
    }
    private int getUniqueChar(String s) {
        int maxUnique = 0;
        boolean[] chars = new boolean[26];
        for (char c : s.toCharArray()) {
            if (!chars[c - 'a']) {
                maxUnique++;
                chars[c - 'a'] = true;
            }
        }
        return maxUnique;
    }
}
