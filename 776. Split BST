Given the root of a binary search tree (BST) and an integer target, split the tree into two subtrees where the first subtree has nodes that are all smaller or equal to the target value, while the second subtree has all nodes that are greater than the target value. It is not necessarily the case that the tree contains a node with the value target.

Additionally, most of the structure of the original tree should remain. Formally, for any child c with parent p in the original tree, if they are both in the same subtree after the split, then node c should still have the parent p.

Return an array of the two roots of the two subtrees in order.



class Solution {
    // 定义：输入一棵 BST 和一个 target，返回两棵 BST 的根节点，
    // 第一棵所有节点都小于等于 target，第二棵所有节点都大于 target
    public TreeNode[] splitBST(TreeNode root, int target) {
        if (root == null) {
            return new TreeNode[2];
        }

        TreeNode[] res = new TreeNode[2];

        if (root.val <= target) {
            // root 必然是第一棵 BST 的根节点
            res[0] = root;
            // 第二棵 BST 的根节点需要去右子树算
            TreeNode[] right = splitBST(root.right, target);
            res[1] = right[1];
            // 保证 root 的右子树都是小于 target 的
            root.right = right[0];
        } else {
            // root 必然是第二棵 BST 的根节点
            res[1] = root;
            // 第一棵 BST 的根节点需要去左子树寻找
            TreeNode[] left = splitBST(root.left, target);
            res[0] = left[0];
            // 保证 root 的左子树都是大于 target 的
            root.left = left[1];
        }
        return res;
    }
}
