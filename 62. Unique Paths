There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

//M[i][j]: the number of unique path that from 0,0 to i,j
//induction rule: M[i][j] = M[i - 1][j] + M[i][j - 1]
//base case: M[0][any] = 1, M[any][0] = 1

//Solution:
class Solution {
    public int uniquePaths(int m, int n) {
        if (m == 0 && n == 0) {
            return 0;
        }
        if (m == 0 || n == 0) {
            return 1;
        }
        int[][] M = new int[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0) {
                    M[i][j] = 1;
                } else if (j == 0) {
                    M[i][j] = 1;
                } else {
                    M[i][j] = M[i][j - 1] + M[i - 1][j];
                }
            }
        }
        return M[m - 1][n - 1];
    }
}

//TC: O(n^2)
//SC: O(n^2)
