Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:

If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It is guaranteed that you can always reach one for all test cases.

 

Example 1:

Input: s = "1101"
Output: 6
Explanation: "1101" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  

// 当进入if循环无非两个case： 1. 当前bit = 1， carry = 0，或者当前bit = 0， carry = 1，不管怎么样，当前bit加完carry都是1，都是一个odd，那就需要加1和除以2这两个steps，else：偶数只需要一个step。

class Solution {
    public int numSteps(String s) {
        int step = 0;
        int carry = 0;
        for (int i = s.length() - 1; i > 0; i--) {
            if (s.charAt(i) - '0' + carry == 1) {
                step += 2;
                carry = 1;
            } else {
                step += 1;
            }
        }
        return step + carry;
    }
}
