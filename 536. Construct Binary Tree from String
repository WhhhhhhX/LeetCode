You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.



// 首先肯定是preorder的执行顺序，然后再递归的找左子树和右子树

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode str2tree(String s) {
        if (s == null || s.length() == 0) {
            return null;
        }
        int rootEnd = s.indexOf("(");
        if (rootEnd == -1) {
            return new TreeNode(Integer.parseInt(s));
        }

        TreeNode root = new TreeNode(Integer.parseInt(s.substring(0, rootEnd)));

        int start = rootEnd;
        int openParenCount = 0;

        for (int i = start; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                openParenCount++;
            } else if (s.charAt(i) == ')') {
                openParenCount--;
            }

            if (openParenCount == 0 && start == rootEnd) {
                root.left = str2tree(s.substring(start + 1, i));
                start = i + 1;
            } else if (openParenCount == 0) {
                root.right = str2tree(s.substring(start + 1, i));
            }
        }
        return root;
    }
}
