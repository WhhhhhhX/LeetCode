Given the root of a binary search tree and a target value, return the value in the BST that is closest to the target. If there are multiple answers, print the smallest.

 

Example 1:


Input: root = [4,2,5,1,3], target = 3.714286
Output: 4
Example 2:

Input: root = [1], target = 4.428571
Output: 1

/***
题目说如果有多个答案返回最小的，那在原先找target的solution 的基础上，在代码中用中序排列搜索(inorder traverse)就能找到小的那个答案。
***/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int res = Integer.MAX_VALUE;
    public int closestValue(TreeNode root, double target) {
        if (root == null) {
            return 0;
        }
        helper(root, target);
        return res;
    }
    private void helper(TreeNode root, double target) {
        if (root == null) {
            return;
        }
        if (root.val < target) {
            if (Math.abs(root.val - target) < Math.abs(res - target)) {
                res = root.val;
            }
            helper(root.right, target);
        } else {
            helper(root.left, target);
            if (Math.abs(root.val - target) < Math.abs(res - target)) {
                res = root.val;
            }
        }
    }
}
