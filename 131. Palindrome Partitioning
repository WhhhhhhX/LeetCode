Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> cur = new ArrayList<>();
        if (s == null || s.length() == 0) {
            return res;
        }
        char[] arr = s.toCharArray();
        helper(arr, res, cur, 0);
        return res;
    }

    private void helper(char[] arr, List<List<String>> res, List<String> cur, int startIndex) {
        if (startIndex == arr.length) {
            
            res.add(new ArrayList<>(cur));
        }
        for (int i = startIndex; i < arr.length; i++) {
            if (isPalindrome(arr, startIndex, i)) {
                cur.add(new String(arr, startIndex, i - startIndex + 1));
                helper(arr, res, cur, i + 1);
                cur.remove(cur.size() - 1);
            } else {
                continue;
            }
        }
    }
    private boolean isPalindrome(char[] arr, int left, int right) {
        while (left <= right) {
            if (arr[left] != arr[right]) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

//tc: O(2^n * n)
