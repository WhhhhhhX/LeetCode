Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

//M[i][j] represnets the largest square of 1s in this binary matrix ending at i,j, including i and j.
//base case: M[0][any] = matrix[0][any]  M[any][0] = matrix[any][0] 也就是matrix里的第一行和第一列，以他们为ending point无法向上和向左延伸得到更大的square。
//induction rule:
//M[i][j] = min(M[i][j - 1], M[i - 1][j], M[i - 1][j - 1]) + 1  if matrix[i][j] == 1
//M[i][j] = 0                                                   else


class Solution {
    public int maximalSquare(char[][] matrix) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int maxSquareLength = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || j == 0) {
                    dp[i][j] = matrix[i][j] - '0';
                } else if (matrix[i][j] == '1'){  
                    dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]);
                    dp[i][j] = Math.min(dp[i - 1][j - 1], dp[i][j]) + 1;
 
                }
                maxSquareLength = Math.max(maxSquareLength, dp[i][j]);
            }
        }
        return maxSquareLength * maxSquareLength;
    }
}


//优化版本
class Solution {
    public int maximalSquare(char[][] matrix) {
        int r = matrix.length;
        if (r == 0) return 0;
        int c = matrix[0].length, s = 0;
        int[] dp = new int[c + 1]; // 注意：dp 大小为 c + 1
        int temp, pre = 0;

        for (int i = 0; i < r; i++) {
            temp = 0; // 重新初始化 temp 对每一行  对于每一个新的行的处理，temp 需要重新初始化为 0，这是因为每一行的开始并没有“左上方”的值可以参考，尤其是当我们处于第一列时。
            for (int j = 1; j <= c; j++) {
                pre = dp[j]; // 保存当前 dp[j] 值
                if (matrix[i][j - 1] == '1') {
                    dp[j] = 1 + Math.min(dp[j], Math.min(temp, dp[j - 1]));
                    s = Math.max(s, dp[j]); // 更新最大边长
                } else {
                    dp[j] = 0;
                }
                temp = pre; // 更新 temp 为这一列之前的 dp[j] 值
            }
        }
        return s * s; // 返回最大面积
    }
}

//dp[j-1] ： 左边元素 
//dp[j] : 更新前是上方元素
//temp：左上方元素 
