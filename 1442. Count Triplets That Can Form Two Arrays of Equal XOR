Given an array of integers arr.

We want to select three indices i, j and k where (0 <= i < j <= k < arr.length).

Let's define a and b as follows:

a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]
Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (i, j and k) Where a == b.

 

Example 1:

Input: arr = [2,3,1,6,7]
Output: 4
Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)


/***
这道题需要用xor的性质，a xor a = 0， 0 xor a = a。如果要求a == b，那不就是a xor b = 0吗，那也就是说从i到k之间的所有数字xor一起等于0，
既然这样的话，取两个pointer，一个代表i，一个代表k，i到k有个区间，j可以随便放在其中任何一个位置都算一种case，然后计算i到k之间的所有数字xor起来是否等于0，如果等于0，则表示有k- i这么多种case 符合要求
也就是说当等于0的时候，j可以放在i到k的任何一个位置都能符合a xor b = 0.

图解：https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/solutions/5228547/god-level-detailed-explanation-2-approaches/?envType=daily-question&envId=2024-05-30
***/




class Solution {
    public int countTriplets(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            int val = arr[i];
            for (int k = i + 1; k < arr.length; k++) {
                val = val ^ arr[k];
                if (val == 0) {
                    count += (k - i);
                }
            }
        }
        return count;
    }
}
