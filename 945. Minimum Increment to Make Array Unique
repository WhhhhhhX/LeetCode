You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.

Return the minimum number of moves to make every value in nums unique.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].

/***
one pass 来解决，就是每次i往前走一个，i左边的已经是单调递增的array，只需比较当前i的元素和左侧递增数组里的最大值，如果比最大值大，则进行更新localmax，i++，否则将当前i的元素加到比globalmax大1，然后更新globalmax。
***/

class Solution {
    public int minIncrementForUnique(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        Arrays.sort(nums);
        int localMax = nums[0];
        int res = 0;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] <= localMax) {
                res += localMax - nums[i] + 1;
                nums[i] = nums[i] + (localMax - nums[i] + 1);
            } 
            localMax = nums[i];
        }
        return res;
    }
}
