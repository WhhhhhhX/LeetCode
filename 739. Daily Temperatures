Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]


//用单调递减栈去记录index，然后找到一个大于当前stack栈顶的就更新对应的res
class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int[] res = new int[n];
        if (temperatures == null || temperatures.length == 0) {
            return res;
        }
        if (n == 1) {
            return new int[]{0};
        }
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i= 0; i < n; i++) {
            while (!stack.isEmpty() && temperatures[stack.peekFirst()] < temperatures[i]) {
                res[stack.peekFirst()] = i - stack.pollFirst();
            }
            stack.offerFirst(i);
        }
        return res;
    }
}
