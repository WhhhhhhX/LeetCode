Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.

//dp 
class Solution {
    public boolean canPartition(int[] nums) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % 2 != 0) {
            return false;
        }
        sum = sum / 2;

        boolean[] dp = new boolean[sum +1];
        dp[0] = true;
        for (int num : nums) {
            for (int curSum = sum; curSum > 0; curSum--) {
                if (curSum - num >= 0) {
                    dp[curSum] = dp[curSum] || dp[curSum - num];
                }
            }
        }
        return dp[sum];

    }
}

//recursion会超时!!!但思路是对的

class Solution {
    public boolean canPartition(int[] nums) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        Arrays.sort(nums);
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % 2 != 0) {
            return false;
        }
        sum = sum / 2;
        return helper(nums, 0, sum);
    }
    private boolean helper(int[] nums, int startIndex, int target) {
        if (target == 0) {
            return true;
        }
        if (target < 0 || startIndex == nums.length) {
            return false;
        }
        if (helper(nums, startIndex + 1, target - nums[startIndex])) {
            return true;
        }
        int nextIndex = startIndex;
        while (nextIndex < nums.length && nums[nextIndex] == nums[startIndex]) {
            nextIndex++;
        }
        return helper(nums, nextIndex, target);
    }
}
