A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
sk == endWord
Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.


//bfs 遍历所有的可能性

class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if (wordList == null) {
            return 0;
        }
        Set<String> set = new HashSet<>(wordList);
        Queue<String> queue = new ArrayDeque<>();
        int level = 0;
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String curString = queue.poll();
                if (curString.equals(endWord)) return level + 1;
                char[] arr = curString.toCharArray();
                for (int j = 0; j < arr.length; j++) {
                    char temp = arr[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        arr[j] = c;
                        String s = new String(arr);
                        if (set.contains(s)) {
                            queue.offer(s);
                            set.remove(s);
                        }
                    }
                    arr[j] = temp;
                }
            }
            level++;
        }
        return 0;
    }
}
