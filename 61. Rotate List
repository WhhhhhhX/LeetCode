Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null) {
            return head;
        } 
        ListNode tail = head;
        int length = 1;
        while (tail.next != null) {
            tail = tail.next;
            length++;
        }

        k = k % length;
        if (k == 0) {
            return head;
        }
        ListNode dummyHead = new ListNode(0);
        ListNode cur = head;
        for (int i = 0; i < k; i++) {
            cur = cur.next;
        }
        ListNode prev = head;
        while (cur.next != null) {
            cur = cur.next;
            prev = prev.next;
        }
        ListNode next = prev.next;
        prev.next = null;
        ListNode last = next;
        while (last.next != null) {
            last = last.next;
        }
        dummyHead.next = next;
        last.next = head;

        return dummyHead.next;
    }

}
