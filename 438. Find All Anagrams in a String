Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

//sliding window + map
//Time Complexity: O(S + P)
//Space Complexity: O(P). We only save unique characters in P. It will be O(1)


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> res = new ArrayList<>();
        if (s == null || s.length() == 0 || p == null ||p.length() == 0 || p.length() > s.length()) {
            return res;
        }
        Map<Character, Integer> map = buildMap(p);
        int toBeMatched = map.size();
        int start = 0;
        int end = 0;
        int sLen = s.length();
        int pLen = p.length();

        while (end < sLen) {
           char c = s.charAt(end);
           if (map.containsKey(c)) {
                int count = map.get(c);
                if (count == 1) {
                    toBeMatched--;
                }
                map.put(c, count - 1);
           }
           end++;

            if (end - start > pLen) {
                char sChar = s.charAt(start);
                if (map.containsKey(sChar)) {
                    int count = map.get(sChar);
                    if (count == 0) {
                        toBeMatched++;
                    }
                    map.put(sChar, count + 1);
                }
                start++;
            }
            if (toBeMatched == 0) {
                res.add(start);
            }
        }
        return res;
    }

    private Map<Character, Integer> buildMap(String s) {
        Map<Character, Integer> map = new HashMap<>();
        char[] arr = s.toCharArray();
        for (char c : arr) {
            map.put(c, map.getOrDefault(c,0) + 1);
        }
        return map;
    }

    
}
