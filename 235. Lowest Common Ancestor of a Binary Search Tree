Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

/***
既然题目说了bst，就要利用bst的性质，左大右小，那我们就可以用p和q的值组成一个区间[min, max]，然后看root是否在这个区间里，如果在，则为lca。
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return null;
        }
        int min = Math.min(p.val, q.val);
        int max = Math.max(p.val, q.val);
        return helper(root, min, max);
    }
    private TreeNode helper(TreeNode root, int min, int max) {
        if (root == null) {
            return null;
        }
        if (root.val < min) {
            return helper(root.right, min, max);
        } else if (root.val > max) {
            return helper(root.left, min, max);
        } else {
            return root;
        }
    }
}
