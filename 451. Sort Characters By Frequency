Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.


//这个题一看就知道需要map去统计每个字母出现的次数，其次我们需要从高到低去排序，谁能实现这一点呢，那就是priorityqueue最大堆去实现

//hashmap + priorityqueue

class Solution {
    public String frequencySort(String s) {
        if (s == null || s.length() <= 1) {
            return s;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        PriorityQueue<Map.Entry<Character, Integer>> maxQ = new PriorityQueue<>(
            (a, b) -> b.getValue() - a.getValue()
        );
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            maxQ.offer(entry);
        }
        StringBuilder result = new StringBuilder();
        while (!maxQ.isEmpty()) {
            Map.Entry<Character, Integer> entry = maxQ.poll();
            result.append(String.valueOf(entry.getKey()).repeat(entry.getValue())); //string class里有repeat函数去重复构建多个相同字符。
        }
        return result.toString();
    }
}
