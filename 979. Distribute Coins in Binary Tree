You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.

In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.

Return the minimum number of moves required to make every node have exactly one coin.

/***
如果一个节点的硬币个数是 x，无论是移出还是移入，把该节点的硬币个数变成 1 的最少移动次数必然是 abs(x - 1)。

res += Math.abs(left) + Math.abs(right)：将左右子树多余或缺少的硬币移动到当前节点所需的次数。
这里的 Math.abs(left) 表示从左子树将硬币移动到当前节点的次数，Math.abs(right) 表示从右子树将硬币移动到当前节点的次数。
***/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int res = 0;
    public int distributeCoins(TreeNode root) {
        helper(root);
        return res;
    }
     // 定义：输入一棵二叉树，返回这棵二叉树中多出的硬币个数，返回负数代表缺少硬币，并且能保证当前以当前根节点的二叉树的每个节点都是1个硬币
    private int helper(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = helper(root.left);
        int right = helper(root.right);

        res += Math.abs(left) + Math.abs(right);
        
        //返回以当前root为根的多出的硬币数量
        return left + right + (root.val - 1);
    }
}
