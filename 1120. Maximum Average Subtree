Given the root of a binary tree, return the maximum average value of a subtree of that tree. Answers within 10-5 of the actual answer will be accepted.

A subtree of a tree is any node of that tree plus all its descendants.

The average value of a tree is the sum of its values, divided by the number of nodes.

 

Example 1:


Input: root = [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.
For the node with value = 6 we have an average of 6 / 1 = 6.
For the node with value = 1 we have an average of 1 / 1 = 1.
So the answer is 6 which is the maximum.


//很正常的recursion 和遍历每个节点计算avg


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    class Node {
        int size;
        int sum;
        public Node(int size, int sum) {
            this.size = size;
            this.sum = sum;
        }
    } 
    private double res = 0.0;
    public double maximumAverageSubtree(TreeNode root) {
        if (root == null) {
            return 0.0;
        }
        helper(root);
        return res;
    }
    private Node helper(TreeNode root) {
        if (root == null) {
            return new Node(0, 0);
        }
        Node left = helper(root.left);
        Node right = helper(root.right);

        int curSum = left.sum + right.sum + root.val;
        int curSize = left.size + right.size + 1;
        double curAvg = (double)curSum / curSize;

        res = Math.max(curAvg, res);
        return new Node(curSize, curSum);
    }
}
