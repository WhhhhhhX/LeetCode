Given the root of a binary tree, collect a tree's nodes as if you were doing this:

Collect all the leaf nodes.
Remove all the leaf nodes.
Repeat until the tree is empty.
 

Example 1:


Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]
Explanation:
[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.

/***
我们正常说的二叉树高度都是从上到下，从根节点到叶子结点递增的，而这题可以需要思考，把二叉树的高度理解成从叶子节点到根节点从下到上递增的，那么把相同高度的节点分到一起就是题目想要的答案。


***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        height(root, res);
        return res;
    }
    private int height(TreeNode root, List<List<Integer>> res) {
        if (root == null) {
            return 0;
        }
        int height = Math.max(height(root.left, res), height(root.right, res)) + 1;
        if (res.size() < height) {
            res.add(new ArrayList<>());
        }
        res.get(height - 1).add(root.val);
        return height;
    }
}
