Given an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

 

Example 1:

Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]
Example 2:

Input: nums = [], target = 0
Output: 0
Example 3:

Input: nums = [0], target = 0
Output: 0

//3 sum的变种，固定一个i，然后比较nums[i] + nums[left] + nums[right]是否小于target，若是，res += (right - left),因为arr单调递增，保持i和left不动， right左边只会原来越小，所以把整个right - left加进结果
//然后left++，继续保持i和right不动，判断此时与target的大小。

//这道题重复元素也算作答案

class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if (nums == null || nums.length < 3) {
            return 0;
        }
        Arrays.sort(nums);  
        int res = 0;
        for (int i = 0; i < nums.length - 2; i++) {
            if (nums[i] > target && target > 0 && nums[i] > 0) {
                break;
            }
            
            int left = i + 1;
            int right = nums.length - 1;

            while (left < right) {
                long cur = (long)(nums[i] + nums[left] + nums[right]);
                if (cur < target) {
                    res += (right - left);
                    left++;
                } else {
                    right--;
                }
            }
        }
        return res;
    }
}
