Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.

 

Example 1:

Input: s = "()())()"
Output: ["(())()","()()()"]
Example 2:

Input: s = "(a)())()"
Output: ["(a())()","(a)()()"]
Example 3:

Input: s = ")("
Output: [""]

/***
https://www.youtube.com/watch?v=k4LX7OSl2bY
***/

class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> res = new ArrayList<>();
        if (s == null || s.length() == 0) {
            return res;
        }
        helper(s, 0, 0, res, new char[]{'(',')'});
        return res;
    }

    private void helper(String s, int start, int end, List<String> res, char[] paren) {
        int stack = 0;
        int n = s.length();
        for (; end < n; end++) {
            char c = s.charAt(end);
            if (c == paren[0]) {
                stack++;
            }
            if (c == paren[1]) {
                stack--;
            }
            if (stack < 0) {
                break;
            }
        }
        if (stack < 0) {
            for (; start <= end; start++) {
                char c = s.charAt(start);
                if (c != paren[1]) {
                    continue;
                }
                if (start > 0 && s.charAt(start) == s.charAt(start - 1)) {
                    continue;
                }
                helper(s.substring(0, start) + s.substring(start + 1), start, end, res, paren);
            }
        } else if (stack > 0) {
            String reversed = new StringBuilder(s).reverse().toString();
            helper(reversed, 0,0,res, new char[]{')','('});
        } else {
            res.add(paren[0] == '(' ? s : new StringBuilder(s).reverse().toString());
        }
    }
}
