Given the root of a binary tree, return all duplicate subtrees.

For each kind of duplicate subtrees, you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with the same node values.

 

Example 1:


Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]
Example 2:


Input: root = [2,1,1]
Output: [[1]]
Example 3:


Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]

/***
你需要知道以下两点：

1、以我为根的这棵二叉树（子树）长啥样？
二叉树的序列化来表示当前以此root为根的子树的结构。

2、以其他节点为根的子树都长啥样？
我们借助一个外部数据结构，让每个节点把自己子树的序列化结果存进去，这样，对于每个节点，不就可以知道有没有其他节点的子树和自己重复了么？用map来存而不用set存，因为如果set存的话，一旦重复，都会存入list结果中，结果重复。
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<String, Integer> map = new HashMap<>();
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> res = new ArrayList<>();
        if (root == null) {
            return res;
        }
        helper(root, res);
        return res;
    }
    private String helper(TreeNode root, List<TreeNode> res) {
        if (root == null) {
            return "#";
        }
        String left = helper(root.left, res);
        String right = helper(root.right, res);
        String mySelf = left + "," + right + "," + root.val;

        int freq = map.getOrDefault(mySelf, 0);
        if (freq == 1) {
            res.add(root);
        }
        map.put(mySelf, freq + 1);
        return mySelf;
    }
}
