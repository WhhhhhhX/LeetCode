You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

example:
Input: head = [0,3,1,0,4,5,2,0]
Output: [4,11]
Explanation: 
The above figure represents the given linked list. The modified list contains
- The sum of the nodes marked in green: 3 + 1 = 4.
- The sum of the nodes marked in red: 4 + 5 + 2 = 11.

/***
intition：
对每个0到0之间的node的val进行sum，然后得到一个总的值接在dummy上
***/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeNodes(ListNode head) {
        if (head == null) {
            return head;
        }
        
        ListNode dummyHead = new ListNode(0);
        ListNode cur = dummyHead;
        
        while (head.next != null) {
            ListNode node = new ListNode(0);
            while (head.next.val != 0) {
                node.val += head.next.val;
                head = head.next;
            }
            cur.next = node;
            cur = cur.next;
            head = head.next;
        }
        return dummyHead.next;
        
    }
}
