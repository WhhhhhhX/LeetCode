The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

/***
用单调栈去写，至于为什么会用到单调栈：过例子可以看出每次对比的都是当前的元素和前一个元素的大小，这不就是stack的后进先出的性质嘛！
***/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        if (nums2 == null || nums1 == null || nums2.length == 0 || nums1.length == 0) {
            return null;
        }

        int[] nextGreaterEleOfNum2 = helper(nums2);
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums2.length; i++) {
            map.put(nums2[i], nextGreaterEleOfNum2[i]);
        }
        int[] res = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            res[i] = map.get(nums1[i]); 
        }
        return res;
    }
    private int[] helper(int[] num) {
        int[] res = new int[num.length];
        Deque<Integer> stk = new ArrayDeque<>();
        for (int i = 0; i < num.length; i++) {
            while (!stk.isEmpty() && num[stk.peekFirst()] < num[i]) {
                res[stk.pollFirst()] = num[i];
            }
            stk.offerFirst(i);
        }
        while (!stk.isEmpty()) {
            res[stk.pollFirst()] = -1;
        }
        return res;
    }
}
