You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.


//sliding window !!! recommend sc: O(1)
class Solution {
    public int characterReplacement(String s, int k) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int start = 0;
        int end = 0;
        int maxWindow = 0;
        int maxRepeatChar = 0;
        int[] arr = new int[26];
        for (; end < s.length(); end++) {
            char c = s.charAt(end);
            arr[c - 'A']++;
            maxRepeatChar = Math.max(maxRepeatChar, arr[c - 'A']);
            if (end - start + 1 - maxRepeatChar > k) {
                arr[s.charAt(start) - 'A']--;
                start++;
            }
            maxWindow = Math.max(maxWindow, end - start + 1);
        }
        return maxWindow;
    }
}

//sliding window + map 思路同上，只是把array换成了map

class Solution {
    public int characterReplacement(String s, int k) {
        if (s == null || s.length() == 0) {
            return 0;
        } 
        Map<Character, Integer> map = new HashMap<>();
        int start = 0;
        int maxRepeatChar = 0;
        int maxWindow = 0;
        for (int end = 0; end < s.length(); end++) {
            char c = s.charAt(end);
            map.put(c, map.getOrDefault(c, 0) + 1);
            maxRepeatChar = Math.max(maxRepeatChar, map.get(c));

            if (end - start + 1 - maxRepeatChar > k) {
                char toBeRemoved = s.charAt(start);
                map.put(toBeRemoved, map.get(toBeRemoved) - 1);
                start++;
            }
            maxWindow = Math.max(maxWindow, end - start + 1);
        }
        return maxWindow;
    }
}


