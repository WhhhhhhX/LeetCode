You have a graph of n nodes. You are given an integer n and an array edges where edges[i] = [ai, bi] indicates that there is an edge between ai and bi in the graph.

Return the number of connected components in the graph.

 

Example 1:


Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2
Example 2:


Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1
 

Constraints:

1 <= n <= 2000
1 <= edges.length <= 5000
edges[i].length == 2
0 <= ai <= bi < n
ai != bi
There are no repeated edges.

//union find method


//bfs 
class Solution {
    public int countComponents(int n, int[][] edges) {
        Queue<Integer> queue = new ArrayDeque<>();
        boolean visited[] = new boolean[n];
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                queue.offer(i);
                while (!queue.isEmpty()) {
                    int curr = queue.poll();
                    visited[curr] = true;
                    for (int[] edge : edges) {
                        int x = edge[0];
                        int y = edge[1];

                        if (x == curr && !visited[y]) {
                            queue.offer(y);
                        }
                        if (y == curr && !visited[x]) {
                            queue.offer(x);
                        }
                    }   
                }
                count++; 
            }
        }
        return count;
    }
}
