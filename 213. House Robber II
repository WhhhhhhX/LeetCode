You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:

Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
Example 2:

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
Example 3:

Input: nums = [1,2,3]
Output: 3

/***
因为有环，所以如果rob第一个房间，就不能rob最后一个房间，反之也是，
所以可以分两种情况：
1. 从index = 0到index = nums.length - 2 遍历第一个房间到倒数第二个房间。
2. 从index = 1到 index = nums.length - 1 遍历第二个房间到最后一个房间
3.然后取两个情况的最大值即可。
***/

class Solution {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0];
        }
        if (nums.length == 2) {
            return Math.max(nums[0], nums[1]);
        }
        int len = nums.length;
        return Math.max(robAction(nums, 0, len - 2), robAction(nums, 1, len - 1));
    }
    private int robAction(int[] nums, int start, int end) {
        int[] dp = new int[end - start + 1];
        dp[0] = nums[start];
        dp[1] = Math.max(nums[start + 1], nums[start]);
        for (int i = 2; i < dp.length; i++) {
            dp[i] = Math.max(nums[start + i] + dp[i - 2], dp[i - 1]);
        }
        return dp[dp.length - 1];
    }
}

//优化版本， 用数值滚动的方法将空间变成o(1)


x：表示前前一个房子的最大偷窃金额。
y：表示前一个房子的最大偷窃金额。
z：表示当前房子的最大偷窃金额。

class Solution {
    public int rob(int[] nums) {
        if (nums == null || nums.length == 0)
            return 0;
        int len = nums.length;
        if (len == 1)
            return nums[0];
        return Math.max(robAction(nums, 0, len - 1), robAction(nums, 1, len));
    }

    int robAction(int[] nums, int start, int end) {
        int x = 0, y = 0, z = 0;
        for (int i = start; i < end; i++) {
            
            z = Math.max(y, x + nums[i]);
            x = y;
            y = z;
        }
        return z;
    }
}

