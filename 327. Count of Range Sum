Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

 

Example 1:

Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.
Example 2:

Input: nums = [0], lower = 0, upper = 0
Output: 1

/***
首先，解决这道题需要快速计算子数组的和，所以你需要阅读前文 前缀和数组技巧，创建一个前缀和数组 preSum 来辅助我们迅速计算区间和。
我继续用比较数学的语言来表述下这道题，题目让你通过 preSum 数组求一个 count 数组，使得：

count[i] = COUNT(j) where lower <= preSum[j] - preSum[i] <= upper
然后请你求出这个 count 数组中所有元素的和。

你看，这是不是和题目描述一样？preSum 中的两个元素之差其实就是区间和。
***/

class Solution {
    private long[] temp;
    private int count = 0;
    private int lower;
    private int upper;
    public int countRangeSum(int[] nums, int lower, int upper) {
        this.lower = lower;
        this.upper = upper;
        if (nums == null || nums.length == 0) {
            return 0;
        }
        long[] preSum = new long[nums.length + 1];
        for (int i = 0; i < nums.length; i++) {
            preSum[i + 1] = preSum[i] + nums[i];
        }
        helper(preSum);
        return count;
    }
    private void helper(long[] preSum) {
        temp = new long[preSum.length];
        mergeSort(preSum, 0, preSum.length - 1);
    }
    private void mergeSort(long[] preSum, int lo, int hi) {
        if (lo >= hi) {
            return;
        }
        int mid = lo + (hi - lo) / 2;
        mergeSort(preSum, lo, mid);
        mergeSort(preSum, mid + 1, hi);
        merge(preSum, lo, mid, hi);
    }
    private void merge(long[] preSum, int lo, int mid, int hi) {
        for (int i = lo; i <= hi; i++) {
            temp[i] = preSum[i];
        }
        int start = mid + 1;
        int end = mid + 1;
        for (int i = lo; i <= mid; i++) {
            while (start <= hi && preSum[start] - preSum[i] < lower) {
                start++;
            }
            while (end <= hi && preSum[end] - preSum[i] <= upper) {
                end++;
            }
            count += end - start;
        }
        int loPtr = lo;
        int hiPtr = mid + 1;
        int index = lo;
        while (loPtr <= mid && hiPtr <= hi) {
            if (temp[loPtr] < temp[hiPtr]) {
                preSum[index++] = temp[loPtr++];
            } else {
                preSum[index++] = temp[hiPtr++];
            }
        }
        while (loPtr <= mid) {
            preSum[index++] = temp[loPtr++];
        }
        while (hiPtr <= hi) {
            preSum[index++] = temp[hiPtr++];
        }
    }
}
