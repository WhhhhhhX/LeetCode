Given a sorted integer array nums and three integers a, b and c, apply a quadratic function of the form f(x) = ax2 + bx + c to each element nums[i] in the array, and return the array in a sorted order.

 

Example 1:

Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]
Example 2:

Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]

//判断a大于0还是小于0，然后可以判断函数开口，开口向上的话，比较双指针谁大谁小，大的放在res里，然后移动指针，反之，小的放在res里，移动指针
https://www.youtube.com/watch?v=2b7f197Jw6k

class Solution {
    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {
        if (nums == null || nums.length == 0) {
            return nums;
        }
        int len = nums.length;
        int[] res = new int[len];
        int start = 0;
        int end = len - 1;
        int index = a >= 0 ? len - 1 : 0;
        while (start <= end) {
            int startNum = getNum(nums[start], a, b, c);
            int endNum = getNum(nums[end], a, b, c);
            if (a >= 0) {
                if (startNum >= endNum) {
                    res[index--] = startNum;
                    start++;
                } else {
                    res[index--] = endNum;
                    end--;
                }
            } else {
                if (startNum >= endNum) {
                    res[index++] = endNum;
                    end--;
                } else {
                    res[index++] = startNum;
                    start++;
                }
            }
        }
        return res;
    }
    private int getNum(int x, int a, int b, int c) {
        return a * x * x + b * x + c;
    }
}
