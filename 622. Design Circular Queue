Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle, and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implement the MyCircularQueue class:

MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.
You must solve the problem without using the built-in queue data structure in your programming language. 


/***
用duouble linkedlist来做，因为这个题涉及到从头或者从未插入或删除元素，使用双向链表的话删除尾部元素的时间复杂度是O(1),要比single linkedlist高效
***/


class MyCircularQueue {
    class doubleLinkedListNode {
        private int val;
        private doubleLinkedListNode next;
        private doubleLinkedListNode prev;

        public doubleLinkedListNode(int val, doubleLinkedListNode next, doubleLinkedListNode prev) {
            this.val = val;
            this.next = next;
            this.prev = prev;
        }
    }
    private int space;
    private doubleLinkedListNode left;
    private doubleLinkedListNode right;
    public MyCircularQueue(int k) {
        this.space = k;
        this.left = new doubleLinkedListNode(0, null, null);
        this.right = new doubleLinkedListNode(0, null, left);
        left.next = right;
    }
    
    public boolean enQueue(int value) {
        if (this.isFull()) {
            return false;
        }
        doubleLinkedListNode cur = new doubleLinkedListNode(value, this.right, this.right.prev);
        this.right.prev.next = cur;
        this.right.prev = cur;
        this.space--;
        return true;
    }
    
    public boolean deQueue() {
        if (this.isEmpty()) {
            return false;
        }
        this.left.next = this.left.next.next;
        this.left.next.prev = this.left;
        this.space++;
        return true;
    }
    
    public int Front() {
        if (this.isEmpty()) {
            return -1;
        }
        return this.left.next.val;
    }
    
    public int Rear() {
        if (this.isEmpty()) {
            return -1;
        }
        return this.right.prev.val;
    }
    
    public boolean isEmpty() {
        return this.left.next == this.right;
    }
    
    public boolean isFull() {
        return this.space == 0;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
