The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.


class Solution {
    private List<List<String>> ans = new ArrayList<>();
    private List<Integer> temp = new ArrayList<>();

    public List<List<String>> solveNQueens(int n) {
        char[][] chessBoard = new char[n][n];
        for (char[] c : chessBoard) {
            Arrays.fill(c, '.');
        }
        if (n == 0) {
            return ans;
        }
        helper(n, chessBoard, 0);
        return ans;
    }
    private void helper(int n, char[][] chessBoard, int row) {
        //base case
        if (row == n) {
            ans.add(arrayToList(chessBoard));
            return;
        }
        
        
        for (int col = 0; col < n; col++) {
            if (isValid(temp, col)) {
                temp.add(col);
                chessBoard[row][col] = 'Q';
                helper(n, chessBoard, row + 1);
                chessBoard[row][col] = '.';
                temp.remove(temp.size() - 1);
            }
            
        }

    }

    private boolean isValid(List<Integer> temp, int col) {
        int row = temp.size();
        for (int i = 0; i < row; i++) {
            if (temp.get(i) == col || Math.abs(temp.get(i) - col) == row - i) {
                return false;
            }
        }
        return true;
    }

    private List<String> arrayToList(char[][] arr) {
        List<String> list = new ArrayList<>();
        for (char[] charArr : arr) {
            list.add(String.copyValueOf(charArr));
        }
        return list;
    }
}
