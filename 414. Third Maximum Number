Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.

//思路：
变量初始化
max1, max2, max3：这三个变量分别用来存储数组中的最大值、第二大的值和第三大的值。它们都初始化为 null，以便后续判断一个新值是否比当前记录的任何一个大值更大。
遍历数组
通过一个 for 循环遍历数组中的每个元素 n。
条件判断和更新
跳过重复的值：
如果当前元素 n 等于 max1、max2 或 max3 中的任何一个，使用 continue 语句跳过后续的逻辑，继续下一次循环。这样做是为了忽略重复的值，确保我们只考虑不同的值。
更新最大值 max1：
如果 max1 是 null 或者 n 大于 max1，那么我们需要更新 max1。
在更新 max1 之前，把当前的 max1 值顺推到 max2，max2 推到 max3。
更新第二大值 max2：
如果 n 不足以成为新的 max1，但 max2 是 null 或者 n 大于 max2，那么只更新 max2。
在更新 max2 之前，将当前的 max2 值顺推到 max3。
更新第三大值 max3：
如果 n 既不足以更新 max1 也不足以更新 max2，但 max3 是 null 或者 n 大于 max3，那么更新 max3。

class Solution {
    public int thirdMax(int[] nums) {
        Integer max1 = null;
        Integer max2 = null; 
        Integer max3 = null;

        for (Integer num : nums) {
            if (num.equals(max1) || num.equals(max2) || num.equals(max3)) {
                continue;
            }
            if (max1 == null || num > max1) {
                max3 = max2;
                max2 = max1;
                max1 = num;
            } else if (max2 == null || num > max2) {
                max3 = max2;
                max2 = num;
            } else if (max3 == null || num > max3) {
                max3 = num;
            }
        }
        return max3 == null ? max1 : max3;
    }
}
