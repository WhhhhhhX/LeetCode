Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
Example 2:

Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:

Input: root = [1,2], targetSum = 0
Output: []

//直上直下的路径， 跟path sum一样

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        if (root == null) {
            return res;
        }
        helper(res, cur, root, targetSum);
        return res;
    }

    private void helper(List<List<Integer>> res, List<Integer> cur, TreeNode root, int remain) {
        //base case
        if (root == null) {
            return;
        }
        cur.add(root.val);
        if (root.left == null && root.right == null) {
            if (root.val == remain) {
                res.add(new ArrayList<>(cur));            
            }
        }
        
        helper(res, cur, root.left, remain - root.val);
        helper(res, cur, root.right, remain - root.val);
        cur.remove(cur.size() - 1);
    }
}
