Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

You must find a solution with a memory complexity better than O(n2).

 

Example 1:

Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

//矩阵中的每一行都是排好序的，就好比多条有序链表，你用优先级队列施展合并多条有序链表的逻辑就能找到第 k 小的元素了。
tc: O(nlogn + klogn) sc: O(n)
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        if (matrix == null || matrix.length == 0) {
            return 0;
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < matrix.length; i++) {
            pq.offer(new int[]{matrix[i][0], i, 0});
        }
        int res = 0;
        while (!pq.isEmpty() && k > 0) {
            int[] curArray = pq.poll();
            res = curArray[0];
            k--;
            int x = curArray[1];
            int y = curArray[2];
            if (y + 1 < matrix[0].length) {
                pq.offer(new int[]{matrix[x][y + 1], x, y + 1});
            }
        }
        return res;
    }
}

//binary search 时间空间复杂度更好
//tc：O(nlog(max - min)) sc: o(1)

class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        // binary search
        int n = matrix.length;
        int min = matrix[0][0], max = matrix[n - 1][n - 1];
        while (min != max) {
            int mid = min + (max - min) / 2;
            int count = countLessOrEqual(mid, matrix);
            if (count < k) { 
    //小于等于k的数量不足k个，说明第k小的在数组的右半边，此时需要更新左边界到 mid+1
                min = mid + 1;
            } else {
                max = mid;
            }
        }
        return min;
    }
    
    private int countLessOrEqual(int num, int[][] array) {
        int row = 0; 
        int col = array.length - 1;
        int count = 0;
        while (row < array.length && col >= 0) {
            if (array[row][col] <= num) {
                count  += col + 1;
                row++;
            } else {
                col--;
            }
        }
        return count;
    }
}
