Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.

A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        if (preorder == null || preorder.length == 0) {
            return null;
        }
        return helper(preorder, 0, preorder.length - 1);
    }
    
    //helper: 输入一个数组形式的preorder，返回一个bst
    private TreeNode helper(int[] preorder, int l, int r) {
        if (l > r) {
            return null;
        }
        int rootVal = preorder[l];
        TreeNode root = new TreeNode(rootVal);
        int p = l + 1;
        while (p <= r && preorder[p] < rootVal) {
            p++;
        }
        root.left = helper(preorder, l + 1, p - 1);
        root.right = helper(preorder, p, r);

        return root;
    }
}
