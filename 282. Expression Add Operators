Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
Example 2:

Input: num = "232", target = 8
Output: ["2*3+2","2+3*2"]
Explanation: Both "2*3+2" and "2+3*2" evaluate to 8.
Example 3:

Input: num = "3456237490", target = 9191
Output: []
Explanation: There are no expressions that can be created from "3456237490" to evaluate to 9191.
 

//dfs 遍历所有情况

/**
 * When we use dfs to do this question, the most tricky part is that how to deal with multiplication. For every 
 * addition and subtraction, we just directly adding or subtracting the new number. However, for multiplication, 
 * we should multiply current number and previous number firstly, and then add previous previous number.
 * So we can use a variable preNum to record every previous number in each recursion step. If current recursive 
 * call is trying multiplication, we should use previous calculation value subtract previous number, and then 
 * adding multiplication result between previous number and current number.
 * */

class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res = new ArrayList<>();
        if (num == null || num.length() == 0) {
            return res;
        }
        
        StringBuilder sb = new StringBuilder();
        helper(res, sb, num, target, 0, 0, 0);
        return res;
    }

/**
 * @param result: result list to store valid expressions
 * @param num: input num candidates
 * @param target: input target number
 * @param expr: current expression string
 * @param calcVal: current calculation value
 * @param preNum: previous number, in order to multiply current number if we want to put * between preNum and curNum
 * @param pos: current index in the input num array
 * */

    private void helper(List<String> res, StringBuilder sb, String nums, int target, long curVal, long preNum, int pos) {
        if (pos == nums.length()) {
            if (curVal == target) {
                res.add(sb.toString());
            }
            return;
        }
        long cur = 0;
        for (int i = pos; i < nums.length(); i++) {

        // corner case: if current position is 0, we can only use it as a single digit number, should be 0
        // if it is not a single digit number with leading 0, it should be considered as an invalid number
            if (nums.charAt(pos) == '0' && i != pos) {
                break;
            }
            cur = cur * 10 + nums.charAt(i) - '0';
            int len = sb.length();
            // position 0 should be considered individually, since it does not have any operand character before curNum
            if (pos == 0) {
                helper(res, sb.append(cur), nums, target, cur, cur, i + 1);
                sb.setLength(len);
            } else {
                helper(res, sb.append("+").append(cur), nums, target, curVal + cur, cur, i + 1);
                sb.setLength(len);
                helper(res, sb.append("-").append(cur), nums, target, curVal - cur, -cur, i + 1);
                sb.setLength(len);
/***
trick part: to calculate multiplication, we should subtract previous number, and then add current
multiplication result to the subtraction result 

for example, if you have a sequence of 12345 and you have proceeded to 1 + 2 + 3, now your eval is 6 right? If you want to 
add a * between 3 and 4, you would take 3 as the digit to be multiplied, so you want to take it out from the existing eval.
You have 1 + 2 + 3 * 4 and the eval now is (1 + 2 + 3) - 3 + (3 * 4). Hope this could help : )

***/
                helper(res, sb.append("*").append(cur), nums, target, curVal - preNum + preNum * cur, preNum * cur, i + 1);
                sb.setLength(len);
            }
        }
    }
}
