Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.

 

Example 1:


Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

/***
这96题相同的思路，计算左子树，计算右子树，然后用当前root串联起来，加入到res中，返回上一层。
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if (n == 0) {
            return null;
        }
        
        Map<String, List<TreeNode>> memo = new HashMap<>();
        return helper(1, n, memo);
    }
    private List<TreeNode> helper(int lo, int hi, Map<String, List<TreeNode>> memo) {
        String key = lo + "-" + hi;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }
        List<TreeNode> res = new ArrayList<>();
        //base case
        if (lo > hi) {
            res.add(null); //当是空树的时候
            return res;
        }
        for (int i = lo; i <= hi; i++) {
            List<TreeNode> leftTree = helper(lo, i - 1, memo);
            List<TreeNode> rightTree = helper(i + 1, hi, memo);
            for (TreeNode leftNode : leftTree) {
                for (TreeNode rightNode : rightTree) {
                    TreeNode root = new TreeNode(i);
                    root.left = leftNode;
                    root.right = rightNode;
                    res.add(root);
                }
            }
        }
        memo.put(key, res);
        return res;
    }
}
