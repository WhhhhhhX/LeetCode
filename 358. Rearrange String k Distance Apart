Given a string s and an integer k, rearrange s such that the same characters are at least distance k from each other. If it is not possible to rearrange the string, return an empty string "".

 

Example 1:

Input: s = "aabbcc", k = 3
Output: "abcabc"
Explanation: The same letters are at least a distance of 3 from each other.
Example 2:

Input: s = "aaabc", k = 3
Output: ""
Explanation: It is not possible to rearrange the string.


//https://www.youtube.com/watch?v=28ASDBKFTxw


class Solution {
    public String rearrangeString(String s, int k) {
        if (k == 0) {
            return s;
        }
        int[] freq = new int[26];
        
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a,b) -> a[1] == b[1] ? a[0] - b[0] : b[1] - a[1]);
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                maxHeap.offer(new int[]{i, freq[i]});
            }
        }
        while (!maxHeap.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < k; i++) {
                int[] cur = maxHeap.poll();
                sb.append((char) (cur[0] + 'a'));
                list.add(cur[0]);
                if (maxHeap.size() == 0) {
                    if (i != k - 1 && sb.length() != s.length()) {
                        return "";
                    }
                    break;
                }
            }
            for (int i : list) {
                if (--freq[i] > 0) {
                    maxHeap.offer(new int[]{i, freq[i]});
                }
            }
        }
        return sb.toString();
    }
}
