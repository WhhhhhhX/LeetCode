Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

 

Example 1:

Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
Example 2:

Input: n = 2
Output: [1,2]
 

Constraints:

1 <= n <= 5 * 104


//用dfs，首先第一层都是从1开始到9，第二层从10 11 12...20，21，22...30，31，32...单调递增
https://www.youtube.com/watch?v=zDQDVtyBv1A

class Solution {
    public List<Integer> lexicalOrder(int n) {
        List<Integer> res = new ArrayList<>();
        if (n == 1) {
            res.add(1);
            return res;
        }
        for (int i = 1; i <= 9; i++) {
            helper(i, n, res);
        }
        return res;
    }
    private void helper(int cur, int n, List<Integer> res) {
        if (cur > n) {
            return;
        }
        res.add(cur);
        for (int i = 0; i <= 9; i++) {
            if (cur * 10 + i > n) {
                break;
            }
            helper(cur * 10 + i, n, res);
        }
    }
}
