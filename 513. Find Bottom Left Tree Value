Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:

             2
         /        \
       1            3
Input: root = [2,1,3]
Output: 1


//只需要用queue来进行layer by layer的遍历，每次记录下每行的最左边那个元素（也就是index i = 0的元素），当queue走完这一整个for循环就为空的时候，
//也就意味着当前layer是最后一层，返回记录的最左边元素就行。

//Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        if (root == null) {
            return -1;
        }
        Deque<TreeNode> queue = new ArrayDeque<>();
        queue.offerLast(root);
        TreeNode result = null;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                TreeNode cur = queue.pollFirst();
                if (cur.left != null) {
                    queue.offerLast(cur.left);
                }
                if (cur.right != null) {
                    queue.offerLast(cur.right);
                }
                if (i == 0) {
                    result = cur;
                }
                
                
            }
        }
        return result.val;
    }
}

//TC: O(n)
//SC: O(n)
