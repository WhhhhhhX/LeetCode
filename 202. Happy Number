Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false

//Note:
//题目中说了会 无限循环，那么也就是说求和的过程中，sum会重复出现，这对解题很重要！一旦sum重复出现，就会进入死循环，永远无法等于1，那么，我们就可以用hashset的不可重复性来解决这道题。


//Solution:
class Solution {
    public boolean isHappy(int n) { 
        if (n == 0) {
            return false;
        }
        Set<Integer> set = new HashSet<>();
        while (n != 1 && !set.contains(n)) {
            set.add(n);
            n = getNextNumber(n);
        }
        return n == 1;
    }

    private int getNextNumber(int n) {
        int sum = 0;
        while (n > 0) {
            int tem = n % 10;
            n = n / 10;
            sum += tem * tem;
        }
        return sum;
    }

}

//TC: O(logn) 假设数字是k位，那时间复杂度就是O(k),那么，位数k和log以10为底的n有线性关系，比如 n = 10^3 k = log(10^3) = 3
//SC: O(logn) 同样是O(k)的空间复杂度
