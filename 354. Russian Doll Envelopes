ou are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.

One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.

Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).

Note: You cannot rotate an envelope.

 

Example 1:

Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
Output: 3
Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).
Example 2:

Input: envelopes = [[1,1],[1,1],[1,1]]
Output: 1


//首先先把width按递增顺序排列，当width一样的时候，把height按照递减的顺序排列，然后用binary search去找

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if (envelopes.length <= 1) {
            return envelopes.length;
        }
        Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int[] dp = new int[envelopes.length];
        int res = 0;
        for (int[] e : envelopes) {
            int left = 0, right = res;
            while (left < right) {
                int mid = left + (right - left) / 2;
                if (dp[mid] < e[1]) {
                    left = mid + 1;
                }  else {
                    right = mid;
                }
            }
            dp[left] = e[1];
            if (left == res) {
                res++;
            }

        }
        return res;
    }
}
