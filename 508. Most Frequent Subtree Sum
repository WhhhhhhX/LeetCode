Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.

The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).

 

Example 1:


Input: root = [5,2,-3]
Output: [2,-3,4]

/***
遍历 + 分解问题
用一个map去统计频率即可
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int[] findFrequentTreeSum(TreeNode root) {
        if (root == null) {
            return null;
        }
        Map<Integer, Integer> freq = new HashMap<>();
        helper(root, freq);
        int maxFreq = 0;
        for (int frequency : freq.values()) {
            maxFreq = Math.max(maxFreq, frequency);
        }
        List<Integer> temp = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : freq.entrySet()) {
            if (entry.getValue() == maxFreq) {
                temp.add(entry.getKey());
            }
        }
        int[] res = new int[temp.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = temp.get(i);
        }
        return res;
    }  
    private int helper(TreeNode root, Map<Integer, Integer> freq) {
        if (root == null) {
            return 0;
        }
        
        int leftSum = helper(root.left, freq);
        int rightSum = helper(root.right, freq);
        int totalSum = leftSum + rightSum + root.val;
        
        freq.put(totalSum, freq.getOrDefault(totalSum, 0) + 1);

        return totalSum; 
    }
}
