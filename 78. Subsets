Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]


//what it will store on each level: just one letter
//how many level in recursion tree: number of letter
//how many states will be put on each level: 2, add or not 

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return res;
        } 
      //  StringBuilder sb = new StringBuilder();
        List<Integer> cur = new ArrayList<>();
        helper(nums, res, 0, cur);
        return res;
    }

    private void helper(int[] nums, List<List<Integer>> res, int index, List<Integer> cur) {
        if (index == nums.length) {
            res.add(new ArrayList(cur));
            return;
        }

        cur.add(nums[index]);
        helper(nums, res, index + 1, cur);
        cur.remove(cur.size() - 1);
        helper(nums, res, index + 1, cur);
    }
}
