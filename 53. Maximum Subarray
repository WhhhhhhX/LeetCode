Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.


class Solution {
    public int maxSubArray(int[] nums) {
        /* dp
        if (nums == null || nums.length == 0) {
            return 0;
        }
      
        int[] dp  = new int[nums.length];
        dp[0] = nums[0];
        int ans = dp[0];
        for (int i = 1; i < nums.length; i++) {
            
            dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]);
            
            ans = Math.max(dp[i], ans);
        }
        return ans;*/
        
        int ans = nums[0];
        int temp = 0;
        for (int i = 0; i < nums.length; i++) {
            temp += nums[i];
            ans = Math.max(temp, ans);
            if (temp < 0) temp = 0;
        }
        return ans;
    }
}
