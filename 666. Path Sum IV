If the depth of a tree is smaller than 5, then this tree can be represented by an array of three-digit integers. For each integer in this array:

The hundreds digit represents the depth d of this node where 1 <= d <= 4.
The tens digit represents the position p of this node in the level it belongs to where 1 <= p <= 8. The position is the same as that in a full binary tree.
The units digit represents the value v of this node where 0 <= v <= 9.
Given an array of ascending three-digit integers nums representing a binary tree with a depth smaller than 5, return the sum of all paths from the root towards the leaves.

It is guaranteed that the given array represents a valid connected binary tree.


Input: nums = [113,215,221]
Output: 12
Explanation: The tree that the list represents is shown.
The path sum is (3 + 5) + (3 + 1) = 12.

/***
遍历，然后对每个值进行拆分。
***/

class Solution {
    private int sum = 0;
    public int pathSum(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        if (nums.length == 1) {
            return nums[0] % 10;
        }

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int code = nums[i] / 10;
            int value = nums[i] % 10;
            map.put(code, value);
        }
        int rootValue = nums[0] / 10;
        helper(rootValue, 0, map);
        return sum;
    }
    private void helper(int root, int pathSum, Map<Integer, Integer> map) {
        if (!map.containsKey(root)) {
            return;
        }
        int val = map.get(root);
        int[] pos = decode(root);
        int depth = pos[0];
        int id = pos[1];
        
        int leftCode = encode(depth + 1, 2 * id - 1);
        int rightCode = encode(depth + 1, 2 * id);

        if (!map.containsKey(leftCode) && !map.containsKey(rightCode)) {
            sum += pathSum + val;
            return;
        }
        helper(leftCode, pathSum + val, map);
        helper(rightCode, pathSum + val, map);
    }

    private int[] decode(int root) {
        int[] arr = new int[2];
        arr[0] = root / 10;
        arr[1] = root% 10;
        return arr;
    }
    private int encode(int depth, int id) {
        return depth * 10 + id;
    }
}
