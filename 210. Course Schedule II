There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

//topological sort + bfs

public class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] res = new int[numCourses];
        int[] indegree = new int[numCourses];
        List<Integer>[] graph = new ArrayList[numCourses];
        
        // Initialize the graph
        for (int i = 0; i < numCourses; i++) {
            graph[i] = new ArrayList<>();
        }
        
        // Build the graph and calculate in-degrees
        for (int[] arr : prerequisites) {
            graph[arr[1]].add(arr[0]);
            indegree[arr[0]]++;
        }
        
        Queue<Integer> q = new LinkedList<>();
        int index = 0;
        
        // Add all courses with no prerequisites to the queue
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
                res[index++] = i;
            }
        }
        
        // Process the queue
        while (!q.isEmpty()) {
            int cur = q.poll();
            for (int next : graph[cur]) {
                indegree[next]--;
                if (indegree[next] == 0) {
                    q.offer(next);
                    res[index++] = next;
                }
            }
        }
        
        return index == numCourses ? res : new int[0];
    }
}
