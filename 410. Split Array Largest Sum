Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.

//二分法（greedy solution）： https://www.youtube.com/watch?v=Ksmmhee4lYE

class Solution {
    public int splitArray(int[] nums, int k) {
        int max = 0;
        int sum = 0;
        for (int num : nums) {
            sum += num;
            max = Math.max(max, num);
        }

        int lo = max;
        int hi = sum;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int pieces = split(nums, mid);
            if (pieces > k) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
    private int split(int[] nums, int largestSum) {
        int pieces = 1;
        int tempSum = 0;
        for (int num : nums) {
            if (tempSum + num > largestSum) {
                tempSum = num;
                pieces++;
            } else {
                tempSum += num;
            }
        }
        return pieces;
    }
}
