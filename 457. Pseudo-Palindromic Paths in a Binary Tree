Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

 

Example 1:



Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: 
the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths 
since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).


/***
遍历一遍二叉树就能得到每条路径上的数字，但这题的考点在于，如何判断一组数字是否存在一个回文串组合？

稍加思考不难想到：如果一组数字中，只有最多一个数字出现的次数为奇数(解题重点！！！)，剩余数字的出现次数均为偶数，那么这组数字可以组成一个回文串。
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int res = 0;
    public int pseudoPalindromicPaths (TreeNode root) {
        int[] freq = new int[10];
        helper(freq, root);
        return res;
    }
    private void helper(int[] freq, TreeNode root) {
        if (root == null) {
            return;
        }
        if (root.left == null && root.right == null) {
            freq[root.val]++;
            int odd = 0;
            for (int n : freq) {
                if (n % 2 == 1) {
                    odd++;
                }
            }
            if (odd <= 1) {
                res++;
            }
            freq[root.val]--;
            return;
        }
        freq[root.val]++;
        helper(freq, root.left);
        helper(freq, root.right);
        freq[root.val]--;
    }
}
