Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.

/***
首先，我们需要先计算出所有num的xor的值，比如nums[1,2,3,2,1,5], 最后xor的值为3xor5 = 110，然后我们需要明白如何去从这个xor的值中把3和5分开分解出来。
怎么分解呢：我们可以通过找110的rightmost的为1的bit，这个bit代表3和5在这一位是不同的，一个为0，一个为1。之后我们可以通过所有num与这个bit相与，来把整个数组分成两部分，然后对每部分进行xor，即可得到3和5.
***/

class Solution {
    public int[] singleNumber(int[] nums) {
        int xorNum = 0;
        for (int i = 0; i < nums.length; i++) {
            xorNum ^= nums[i];
        }
        int ritghMostBitOf1 = xorNum & (-xorNum);
        int[] res = new int[2];
        for (int num : nums) {
            if ((num & ritghMostBitOf1) == 0) {
                res[0] ^= num;
            } else {
                res[1] ^= num;
            }
        }
        return res;
        
    }
}
