Given the root of a binary tree where every node has a unique value and a target integer k, return the value of the nearest leaf node to the target k in the tree.

Nearest to a leaf means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

/***
和863题一样，先建树，然后对从target开始一层一层bfs，找到根节点返回
***/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private TreeNode target = null;
    public int findClosestLeaf(TreeNode root, int k) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> q = new LinkedList<>();
        HashSet<TreeNode> visited = new HashSet<>();
        Map<TreeNode, TreeNode> map = new HashMap<>();
        buildGraph(root, null, k, map);
        q.offer(target);
        visited.add(target);
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode cur = q.poll();
                if (cur.left == null && cur.right == null) {
                    return cur.val;
                }
                if (cur.left != null && !visited.contains(cur.left)) {
                    q.offer(cur.left);
                    visited.add(cur.left);
                }
                if (cur.right != null && !visited.contains(cur.right)) {
                    q.offer(cur.right);
                    visited.add(cur.right);
                }
                TreeNode parentNode = map.get(cur);
                if (parentNode != null && !visited.contains(parentNode)) {
                    q.offer(parentNode);
                    visited.add(parentNode);
                }
            }
        }
        return -1;
    }
    private void buildGraph(TreeNode root, TreeNode parent, int k, Map<TreeNode, TreeNode> map) {
        if (root == null) {
            return;
        }

        if (root.val == k) {
            target = root;
        }
        // 记录子节点到父节点的映射
        map.put(root, parent);

        

        buildGraph(root.left, root, k, map);
        buildGraph(root.right, root, k, map);
    }
}
