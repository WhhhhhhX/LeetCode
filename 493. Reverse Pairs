Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

/***
和mergesort差不多，只不过多了从line 50 - 55的操作去统计count
***/

class Solution {
    private int count = 0;
    private int[] temp;

    public int reversePairs(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        sort(nums);
        return count;
    }
    private void sort(int[] nums) {
        temp = new int[nums.length];
        mergeSort(nums, 0, nums.length - 1);
    }
    private void mergeSort(int[] nums, int lo, int hi) {
        if (lo == hi) {
            return;
        }
        int mid = lo + (hi - lo) / 2;
        mergeSort(nums, lo, mid);
        mergeSort(nums, mid + 1, hi);
        merge(nums, lo, mid, hi);
    }
    private void merge(int[] nums, int lo, int mid, int hi) {
        for (int i = lo; i <= hi; i++) {
            temp[i] = nums[i];
        }
        int end = mid + 1;
        for (int p = lo; p <= mid; p++) {
            while (end <= hi && (long)nums[p] > (long) 2 * temp[end]) {
                end++;
            }
            count += end - (mid + 1);
        }
        int loPtr = lo;
        int hiPtr = mid + 1;
        int index = lo;
        while (loPtr <= mid && hiPtr <= hi) {
            if (temp[loPtr] < temp[hiPtr]) {
                nums[index++] = temp[loPtr++];
            } else {
                nums[index++] = temp[hiPtr++];
            }
        }
        while (loPtr <= mid) {
            nums[index++] = temp[loPtr++];
        }
        while (hiPtr <= hi) {
            nums[index++] = temp[hiPtr++];
        }
    }
}

