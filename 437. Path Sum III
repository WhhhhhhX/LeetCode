Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
Output: 3
Explanation: The paths that sum to 8 are shown.
Example 2:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: 3


//recursion: 三种情况： 1. 从root开始 2. 从左子树的某个点开始 3. 从右子树的某个点开始
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int counter = 0;
    public int pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return 0;
        }
        helper(root, (long)targetSum, 0);
        pathSum(root.left, targetSum);
        pathSum(root.right, targetSum);
        return counter;
    }
    private void helper(TreeNode root, long sum, long curSum) {
        if (root == null) {
            return;
        }
        curSum += root.val;
        if (curSum == sum) {
            counter++;
        }
        helper(root.left, sum, curSum);
        helper(root.right, sum, curSum);
    }
}

//map + recursion  https://www.youtube.com/watch?v=Cb5Me5oBfwo
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int res = 0;
    int targetSum;
    Map<Long, Integer> map;
    public int pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return 0;
        }
        this.targetSum = targetSum;
        map = new HashMap<>();
        helper(root, 0);
        return res;
    }
    private void helper(TreeNode root,  long curSum) {
        if (root == null) {
            return;
        }
        curSum += root.val;
        if (curSum == targetSum) {
            res++;
        }
        res += map.getOrDefault(curSum - targetSum, 0);
        map.put(curSum, map.getOrDefault(curSum, 0) + 1);
        helper(root.left, curSum);
        helper(root.right, curSum);
        map.put(curSum, map.get(curSum) - 1);
    }
}
