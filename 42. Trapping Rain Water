Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

//Solution 1: brute force

class Solution {
    public int trap(int[] height) {
        if (height == null || height.length == 0) {
            return 0;
        }
        
        int water = 0;
        for (int i = 1; i < height.length - 1; i++) {
            int leftMax = 0;
            int rightMax = 0;
            for (int j = i; j >= 0; j--) {
                leftMax = Math.max(leftMax, height[j]);
            }
            for (int z = i; z < height.length; z++) {
                rightMax = Math.max(rightMax, height[z]);
            }
            water += Math.min(leftMax, rightMax) - height[i];
        }
        return water;
    }
}

//Solution 2: DP recommend!

class Solution {
    public int trap(int[] height) {
        int leng = height.length;
        if (leng < 3) return 0;
        int water = 0;
        int[] findLeftMax = new int[leng];
        int[] findRightMax = new int[leng];
        findLeftMax[0] = height[0];
        findRightMax[leng - 1] = height[leng - 1];
        for (int i = 1; i < leng; i++) {
            findLeftMax[i] = Math.max(findLeftMax[i - 1], height[i]);
        }
        for (int i = leng - 2; i >= 0; i--) {
            findRightMax[i] = Math.max(findRightMax[i + 1], height[i]);
        }

        for (int i = 1; i < leng - 1; i++) {
            water += Math.min(findLeftMax[i],findRightMax[i]) - height[i];
        } 
        return water;
    }
}
