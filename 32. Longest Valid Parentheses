Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring
.

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0

class Solution {
    public int longestValidParentheses(String s) {
        if (s == null || s.length() <= 1) {
            return 0;
        }

        int lastInvalidClosingParen = -1;
        int max = 0;
        Deque<Integer> stack = new ArrayDeque<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.offerFirst(i);
            } else {
                if (stack.isEmpty()) {
                    lastInvalidClosingParen = i;
                } else {
                    stack.pollFirst();
                    if (stack.isEmpty()) {
                        max = Math.max(max, i - lastInvalidClosingParen);
                    } else {
                        max = Math.max(max, i - stack.peekFirst());
                    }
                }
            }
        }
        return max;
    }
}

