Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.
 

Constraints:

1 <= nums.length <= 5 * 105
-231 <= nums[i] <= 231 - 1

/***
思路：
The main idea is keep two values when check all elements in the array: the minimum value min until 
now and the second minimum value secondMin from the minimum value's position until now. Then if we 
can find the third one that larger than those two values at the same time, it must exists the triplet 
subsequence and return true.

***/

class Solution {
    public boolean increasingTriplet(int[] nums) {
        if (nums == null || nums.length < 3) {
            return false;
        }
        int firstMin = Integer.MAX_VALUE;
        int secondMin = Integer.MAX_VALUE;

        for (int i : nums) {
            if (i <= firstMin) {
                firstMin = i;
            } else if (i <= secondMin) {
                secondMin = i;
            } else {
                return true;
            }
        }
        return false;
    }
}
