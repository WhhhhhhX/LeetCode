Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    // 分隔符，区分每个节点的值
    private final static String SEP = ",";

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serialize(root, sb);
        return sb.toString();
    }

    private void serialize(TreeNode root, StringBuilder sb) {
        if (root == null) {
            return;
        }
        // 前序遍历位置进行序列化 不能中序 因为中序无法确定唯一的bst
        sb.append(root.val).append(SEP);
        serialize(root.left, sb);
        serialize(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.isEmpty()) return null;
        // 转化成前序遍历结果
        LinkedList<Integer> inorder = new LinkedList<>();
        for (String s : data.split(SEP)) {
            inorder.add(Integer.parseInt(s));
        }
        return deserialize(inorder, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    // 定义：将 nodes 中值在闭区间 [min, max] 的节点构造成一棵 BST
    private TreeNode deserialize(List<Integer> nodes, int min, int max) {
        if (nodes.isEmpty()) return null;
        // 前序遍历位置进行反序列化
        // 前序遍历结果第一个节点是根节点
        int rootVal = nodes.getFirst();
        if (rootVal > max || rootVal < min) {
            // 超过闭区间 [min, max]，则返回空指针
            return null;
        }
        nodes.removeFirst();
        // 生成 root 节点
        TreeNode root = new TreeNode(rootVal);
        // 构建左右子树
        // BST 左子树都比根节点小，右子树都比根节点大
        root.left = deserialize(nodes, min, rootVal);
        root.right = deserialize(nodes, rootVal, max);

        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;
