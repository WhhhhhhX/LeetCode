Design your implementation of the circular double-ended queue (deque).

Implement the MyCircularDeque class:

MyCircularDeque(int k) Initializes the deque with a maximum size of k.
boolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.
boolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.
boolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.
boolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.
int getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.
int getRear() Returns the last item from Deque. Returns -1 if the deque is empty.
boolean isEmpty() Returns true if the deque is empty, or false otherwise.
boolean isFull() Returns true if the deque is full, or false otherwise.
 
class MyCircularDeque {
    private int space;
    class linkedListNode {
        private linkedListNode next;
        private linkedListNode prev;
        private int val;
        public linkedListNode(linkedListNode next, linkedListNode prev, int val) {
            this.next = next;
            this.prev = prev;
            this.val = val;
        }
    }
    private linkedListNode left;
    private linkedListNode right;

    public MyCircularDeque(int k) {
        this.space = k;
        this.left = new linkedListNode(null, null, 0);
        this.right = new linkedListNode(null, this.left, 0);
        this.left.next = this.right;
    }
    
    public boolean insertFront(int value) {
        if (this.isFull()) {
            return false;
        }
        linkedListNode cur = new linkedListNode(this.left.next, this.left, value);
        this.left.next.prev = cur;
        this.left.next = cur;
        this.space--;
        return true;
    }
    
    public boolean insertLast(int value) {
        if (this.isFull()) {
            return false;
        }
        linkedListNode cur = new linkedListNode(this.right, this.right.prev, value);
        this.right.prev.next = cur;
        this.right.prev = cur;
        this.space--;
        return true;
    }
    
    public boolean deleteFront() {
        if (this.isEmpty()) {
            return false;
        }
        this.left.next = this.left.next.next;
        this.left.next.prev = this.left;
        this.space++;
        return true;
    }
    
    public boolean deleteLast() {
        if (this.isEmpty()) {
            return false;
        }
        this.right.prev = this.right.prev.prev;
        this.right.prev.next = this.right;
        this.space++;
        return true;

    }
    
    public int getFront() {
        if (this.isEmpty()) {
            return -1;
        }
        return this.left.next.val;
    }
    
    public int getRear() {
        if (this.isEmpty()) {
            return -1;
        }
        return this.right.prev.val;
    }
    
    public boolean isEmpty() {
        return this.left.next == this.right;
    }
    
    public boolean isFull() {
        return this.space == 0;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
