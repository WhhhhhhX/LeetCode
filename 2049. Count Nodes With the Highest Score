There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.

Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.

Return the number of nodes that have the highest score.

/***
其实分析题目，不难得出：一个节点的 分数 = 左子树节点个数 x 右子树节点个数 x 除自己外其他节点个数。
只要写个 countNode 函数，在后序位置可以得到左右子树的节点个数 leftCount 和 rightCount，然后除
自己外其他节点个数 otherCount 就等于总的节点个数 n 减掉左右子树的节点个数再减掉当前节点，最后求个乘积就能算出当前节点的「分数」了。
***/


class Solution {
    public int countHighestScoreNodes(int[] parents) {
        if (parents == null || parents.length == 0) {
            return 0;
        }
        int[][] tree = buildTree(parents); //tree的邻接表
        Map<Long, Integer> map = new HashMap<>();

        //recursion for binary tree 
        countNode(tree, map, 0, tree.length);
        
        //do operation on map to get result
        long max = 0;
        for (long score : map.keySet()) {
            max = Math.max(max, score);
        }
        return map.get(max);
    }

    private int countNode(int[][] tree, Map<Long, Integer> map, int root, int totalLength) {
        if (root == -1) {
            return 0;
        }

        int left = countNode(tree, map, tree[root][0], totalLength);
        int right = countNode(tree, map, tree[root][1], totalLength);

        int other = totalLength - left - right - 1;

        long score = (long)Math.max(left, 1) * (long)Math.max(right, 1) * (long)Math.max(other, 1);

        map.put(score, map.getOrDefault(score, 0) + 1);

        return left + right + 1;

    }

    private int[][] buildTree(int[] parents) {
        int[][] res = new int[parents.length][2];

        // 表节点 x 的左子节点为 tree[x][0]，节点 x 的右子节点为 tree[x][1]
        // 若 tree[x][0] 或 tree[x][1] 等于 -1 则代表空指针
        for (int i = 0; i < parents.length; i++) {
            // 先都初始化成空指针
            res[i][0] = -1;
            res[i][1] = -1;
        }
        for (int i = 1; i < parents.length; i++) {
            int parentOfI = parents[i];
            if (res[parentOfI][0] == -1) {
                res[parentOfI][0] = i;
            } else {
                res[parentOfI][1] = i;
            }
        }
        return res;
    }
}
