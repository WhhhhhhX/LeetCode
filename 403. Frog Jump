A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of stones positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.

If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.

 

Example 1:

Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.
Example 2:

Input: stones = [0,1,2,3,4,8,9,11]
Output: false
Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.
 

Constraints:

2 <= stones.length <= 2000
0 <= stones[i] <= 231 - 1
stones[0] == 0
stones is sorted in a strictly increasing order.

//dp来判断。
dp[i][k] 表示青蛙是否可以从之前的某块石头通过恰好 k 单位的跳跃到达第 i 块石头。
上一块石头是dp[j][].
induction rule:
青蛙从第 j 块石头跳到第 i 块石头，距离为 k，根据规则，如果之前的跳跃是 k-1、k 或 k+1 单位，那么当前可能的跳跃可以是 k 单位：

dp[j][k-1]：如果青蛙上一次跳了 k-1 单位，那么这次可以跳 k 单位。
dp[j][k]：如果青蛙上一次跳了 k 单位，那么这次也可以跳 k 单位。
dp[j][k+1]：如果青蛙上一次跳了 k+1 单位，这次可以减少一点，跳 k 单位。


class Solution {
    public boolean canCross(int[] stones) {
        if (stones == null || stones.length == 0) {
            return true;
        }
        int n = stones.length;
        boolean[][] dp = new boolean[n][n];
        dp[0][0] = true;
        for (int i = 1; i < n; i++) {
            if (stones[i] - stones[i - 1] > i) return false; 
        }
        for (int i = 1; i < n; i++) {
            for (int j = i - 1; j >= 0; j--) {
                int k = stones[i] - stones[j];
                if (k > j + 1) break;
                dp[i][k] = dp[j][k - 1] || dp[j][k] || dp[j][k + 1];
                if (i == n - 1 && dp[i][k]) return true;
            }
        }
        return false;
    }
}
